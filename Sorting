package Array;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

public class Sorting {

	public static void main(String[] args) {
		// An array that stores up to 10,000 words
		String[] words = new String[10000];
		// initializing count to 0
		int count = 0;
		
		// Buffered reader reads words from the text and stores them into the array
		try (BufferedReader reader = new BufferedReader(new FileReader("text.txt"))){
			String line;
			while ((line = reader.readLine()) != null) {
				String[] lineWords = line.split(" ");
				for (String word : lineWords) {
					words[count] = word;
					count++;
				}
			}
			// Prints an error message if the file was not found
		} catch (IOException e) {
			System.err.println("No file found " + e.getMessage());
			System.exit(1);
		}
		
		// Prints the unsorted list
		System.out.println("Unsorted list...");
		for (int i = 0; i < count; i++) {
			// Prints each word with a space in between
			System.out.print(words[i] + " ");
			// Prints a new line after every 4th word
			if (( i + 1) % 4 == 0) {
				System.out.println();
			}
		}

		// Sorts the array of words
		Sort (words, count);
	
		// Prints the sorted list
		System.out.println("Sorted list...");
		for (int i = 0; i < count; i++) {
			System.out.print(words[i] + " ");
			if (( i + 1) % 4 == 0) {
				System.out.println();
			}
		}
	
	// Searches for words in the array using a binary search 
	Scanner scanner = new Scanner(System.in);
	String search;
	int index;
	
	do {
		System.out.println("Enter words to search for... enter 0 to quit");
		// Reads user input for the word search
		search = scanner.nextLine();
		
		// Binary search for each word input
		if (!search.equals("0")) {
			index = binarySort(words, count, search);
			if (index != -1) {
				System.out.println(search + " is in the list at index " + index);
			} else {
				System.out.println(search + " is not in the list");
			}
		}
		// This stays in a loop until the user enters "0"
	} while (!search.equals("0"));
		scanner.close();
	}
		// Sorts array of strings
		public static void Sort(String[] arr, int n) {
			Arrays.sort(arr, 0, n);
	}

		// Method for searching for a word using a binary search
		public static int binarySort (String[] arr, int n, String key) {
			int left = 0;
			int right = n - 1;
			
			while (left <= right) {
				int mid = (left + right) /2;
				if (arr[mid].equals(key)) {
					return mid;
				} else if (arr[mid].compareTo(key) < 0) {
					left = mid + 1;
				} else {
					right = mid - 1;
				}
			}
		return -1;
		}
	
}
